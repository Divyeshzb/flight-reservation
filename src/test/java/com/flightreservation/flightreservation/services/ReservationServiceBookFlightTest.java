// ********RoostGPT********
/*
Test generated by RoostGPT for test Flight-reservation using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=bookFlight_676374882e
ROOST_METHOD_SIG_HASH=bookFlight_b65373531f

"""
Scenario 1: Test for successful flight booking
Details:
    TestName: testBookFlightSuccessful
    Description: This test is meant to check the successful execution of bookFlight method when a valid ReservationRequest object is provided.
Execution:
    Arrange: Create and set up a mock ReservationRequest object with valid data.
    Act: Invoke the bookFlight method with the crafted ReservationRequest object.
    Assert: Assert that the returned Reservation object is not null and the corresponding fields match those of the input ReservationRequest.
Validation:
    This validates that the bookFlight method correctly handles a valid ReservationRequest and returns the correct Reservation.

Scenario 2: Test for null ReservationRequest
Details:
    TestName: testBookFlightNullRequest
    Description: This test is meant to verify how the bookFlight method handles a null ReservationRequest object.
Execution:
    Arrange: No data setup is required for this test as we're testing a null object scenario.
    Act: Invoke the bookFlight method with a null ReservationRequest object.
    Assert: Assert that the returned Reservation object is null.
Validation:
    This confirms the bookFlight method's handling capability when a null ReservationRequest is provided.

Scenario 3: Test for invalid ReservationRequest
Details:
    TestName: testBookFlightInvalidRequest
    Description: This test is meant to check the bookFlight method's behavior when an invalid ReservationRequest object is used.
Execution:
    Arrange: Create and set up a mock ReservationRequest object with invalid data.
    Act: Invoke the bookFlight method with the crafted invalid ReservationRequest object.
    Assert: Assert that the returned Reservation object is null or throws an appropriate exception.
Validation:
    This ensures that the bookFlight method correctly handles and rejects invalid ReservationRequests.

Scenario 4: Test for Exception handling
Details:
    TestName: testBookFlightExceptionHandling
    Description: This test is designed to verify the bookFlight method's exception handling capability.
Execution:
    Arrange: Craft a scenario in which ReservationRequest or a method it invokes throws an exception.
    Act: Invoke the bookFlight method within this scenario.
    Assert: Assert that the appropriate exception is caught and handled.
Validation:
    This test verifies the robustness of bookFlight method in the face of runtime exceptions.

"""
*/

// ********RoostGPT********
package com.flightreservation.flightreservation.services;

import com.flightreservation.flightreservation.domains.Reservation;
import com.flightreservation.flightreservation.dto.ReservationRequest;
import org.junit.Test;
import org.junit.Before;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class ReservationServiceBookFlightTest {

	@InjectMocks
	ReservationServiceImpl reservationService;

	@Mock
	ReservationRequest reservationRequest;

	@Before
	public void setup() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
    public void testBookFlightSuccessful() {
        when(reservationRequest.getFlightId()).thenReturn(1L);
        when(reservationRequest.getPassengerFirstName()).thenReturn("John");
        when(reservationRequest.getPassengerLastName()).thenReturn("Doe");

        Reservation reservation = reservationService.bookFlight(reservationRequest);

        // LOGGER.info here
        assertNotNull(reservation);
        assertEquals("John", reservation.getPassenger().getFirstName());
        assertEquals("Doe", reservation.getPassenger().getLastName());
    }

	@Test
	public void testBookFlightNullRequest() {
		// LOGGER.info here
		Reservation reservation = reservationService.bookFlight(null);

		assertNull(reservation);
	}

	@Test
    public void testBookFlightInvalidRequest() {
        when(reservationRequest.getFlightId()).thenReturn(null);
        when(reservationRequest.getPassengerFirstName()).thenReturn("");
        when(reservationRequest.getPassengerLastName()).thenReturn("");

        Reservation reservation = reservationService.bookFlight(reservationRequest);

        // LOGGER.info here
        assertNull(reservation);
    }

	@Test(expected = RuntimeException.class)
    public void testBookFlightExceptionHandling() {
        when(reservationRequest.getFlightId()).thenThrow(RuntimeException.class);

        // LOGGER.info here
        reservationService.bookFlight(reservationRequest);
    }

}
