// ********RoostGPT********
/*
Test generated by RoostGPT for test Flight-reservation using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=loadUserByUsername_062a6ce56a
ROOST_METHOD_SIG_HASH=loadUserByUsername_01fe22072c

"""
Scenario 1: Testing for a valid user

  Details:
    TestName: testLoadUserByValidEmail
    Description: Tests the method's capability to successfully retrieve user details when a valid email/username is provided.
  Execution:
    Arrange: Instantiate a User with a certain email and roles. Mock the repository's findByEmail() method to return this user when the same email is queried.
    Act: Invoke loadUserByUsername() method with this email.
    Assert: Assert that the returned UserDetails instance corresponds to the original User instance.
  Validation:
    The test validates the method's primary functionality of locating and returning user details by using an email. The expected outcome reinforces the understanding that a valid and registered email results in successful retrieval of user details.

Scenario 2: Testing for invalid user

  Details:
    TestName: testLoadUserByInvalidEmail
    Description: Test the method's outcome when an invalid or non-existing email/username is passed.
  Execution:
    Arrange: Mock the repository's findByEmail() method to return an empty Optional instance when a random email is queried.
    Act: Invoke loadUserByUsername() method with this random email.
    Assert: Assert that a UsernameNotFoundException is thrown.
  Validation:
    This test validates the method's error handling capability when trying to locate a non-existent user. The thrown exception would indicate that the user could not be found for the provided email.

Scenario 3: Testing for null User input

  Details:
    TestName: testLoadUserByNullEmail
    Description: Tests the method's outcome when a null username/email is used.
  Execution:
    Arrange: No arrangement needed as the input is null.
    Act: Invoke loadUserByUsername() method with null as an argument.
    Assert: Assert that a UsernameNotFoundException is thrown.
  Validation:
    This test verifies if the method can handle null input cases correctly. Given that an email is required to retrieve user details, a null input should result in an error, possibly in the form of a UsernameNotFoundException, hence the expected outcome.

"""
*/

// ********RoostGPT********
package com.flightreservation.flightreservation.services;

import com.flightreservation.flightreservation.domains.User;
import com.flightreservation.flightreservation.repositories.UserRepository;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import java.util.Optional;
import java.util.HashSet; // Added import for HashSet
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class UserDetailsServiceImplLoadUserByUsernameTest {

	@Mock
	private UserRepository userRepository;

	@InjectMocks
	UserDetailsServiceImpl userDetailsServiceImpl;

	@Test
	public void testLoadUserByValidEmail() {
		// Arrange
		String email = "test@test.com";
		User user = new User();
		user.setEmail(email);
		user.setPassword("password123");
		user.setRoles(new HashSet<>()); // Changed ArrayList to HashSet as per User
										// class's roles type
		when(userRepository.findByEmail(email)).thenReturn(Optional.of(user));
		// Act
		UserDetails userDetails = userDetailsServiceImpl.loadUserByUsername(email);
		// Assert
		assertNotNull(userDetails);
		assertEquals(email, userDetails.getUsername());
		assertEquals(user.getPassword(), userDetails.getPassword());
	}

	@Test(expected = UsernameNotFoundException.class)
	public void testLoadUserByInvalidEmail() {
		// Arrange
		String email = "invalid@test.com";
		when(userRepository.findByEmail(email)).thenReturn(Optional.empty());
		// Act
		UserDetails userDetails = userDetailsServiceImpl.loadUserByUsername(email);
		// Assertion is done by the 'expected' attribute of @Test
	}

	@Test(expected = UsernameNotFoundException.class)
	public void testLoadUserByNullEmail() {
		// Act
		UserDetails userDetails = userDetailsServiceImpl.loadUserByUsername(null);
		// Assertion is done by the 'expected' attribute of @Test
	}

}
