// ********RoostGPT********
/*
Test generated by RoostGPT for test Flight-reservation using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=loadUserByUsername_062a6ce56a
ROOST_METHOD_SIG_HASH=loadUserByUsername_01fe22072c

Scenario 1: User Found

Details:
  TestName: shouldReturnUserDetailsWhenUsernameIsFound.
  Description: The test checks if the method properly fetches the User object and transforms it to UserDetails when user with such username exists in the repository.
  Execution:
    Arrange: Mock the UserRepository to return an Optional containing a User object when findByEmail is called with the test username.
    Act: Invoke the loadUserByUsername method with the test username.
    Assert: Check if the returned UserDetails object contains the correct username, password and roles.
  Validation:
    The assertion verifies that the method properly retrieves and transforms User objects. It checks the core user retrieval functionality of the method.

Scenario 2: User Not Found

Details:
  TestName: shouldThrowUsernameNotFoundExceptionWhenUsernameNotFound.
  Description: The test is meant to check if the method throws a UsernameNotFoundException when there is no user with such email in the repository.
  Execution:
    Arrange: Mock the UserRepository to return an empty Optional when findByEmail is called with the test username.
    Act: Invoke loadUserByUsername method with the test username.
    Assert: Assert that the method throws a UsernameNotFoundException.
  Validation:
    The assertion checks whether the method correctly handles the case of a missing user by throwing an exception. This test helps to ensure robust error handling in the system.

Scenario 3: Null Username Error Handling

Details:
  TestName: shouldThrowUsernameNotFoundExceptionWhenUsernameIsNull.
  Description: The test aims to check if the method throws an UsernameNotFoundException when passed a null username.
  Execution:
    Arrange: No specific arrangement needed as the test username is null.
    Act: Invoke loadUserByUsername method with a null username.
    Assert: Assert that the method throws an UsernameNotFoundException.
  Validation:
    This test validates the error handling part of the method. The method should be able to handle null inputs correctly, hence the expected exception. This is crucial for the stability of the application.
*/

// ********RoostGPT********
package com.flightreservation.flightreservation.services;

import com.flightreservation.flightreservation.domains.User;
import com.flightreservation.flightreservation.repositories.UserRepository;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;

import java.util.Optional;
import java.util.HashSet; // Replaced ArrayList with HashSet
import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class UserDetailsServiceImplLoadUserByUsernameTest {

	@InjectMocks
	private UserDetailsServiceImpl userService;

	@Mock
	private UserRepository userRepository;

	@Test
	public void shouldReturnUserDetailsWhenUsernameIsFound() {
		User user = new User();
		user.setEmail("user@test.com");
		user.setPassword("pass123");
		user.setRoles(new HashSet<>()); // HashSet is used here instead of ArrayList
										// because the original type is Set.
		when(userRepository.findByEmail(anyString())).thenReturn(Optional.of(user));

		UserDetails userDetails = userService.loadUserByUsername("user@test.com");
		assertEquals(user.getEmail(), userDetails.getUsername());
		assertEquals(user.getPassword(), userDetails.getPassword());
		assertEquals(user.getRoles(), userDetails.getAuthorities());
	}

	@Test(expected = UsernameNotFoundException.class)
    public void shouldThrowUsernameNotFoundExceptionWhenUsernameNotFound() {
        when(userRepository.findByEmail(anyString())).thenReturn(Optional.empty());
        userService.loadUserByUsername("unknown@test.com");
    }

	@Test(expected = UsernameNotFoundException.class)
	public void shouldThrowUsernameNotFoundExceptionWhenUsernameIsNull() {
		userService.loadUserByUsername(null);
	}

}
