// ********RoostGPT********
/*
Test generated by RoostGPT for test Flight-reservation using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=bookFlight_f2e0d490ed
ROOST_METHOD_SIG_HASH=bookFlight_b65373531f

"""
Scenario 1: Flight Existence Test
  Details:
    TestName: verifyFlightExistence
    Description: This test ensures the existence of the flight with the provided flightId.
  Execution:
    Arrange: Create a reservationRequest with a valid flightId which exists in the flight repository.
    Act: Invoke the target method `bookFlight` with the created reservationRequest.
    Assert: Catch if the method throws `FlightNotFound`.
  Validation:
    This test verifies that a flight exists in the repository with the provided flightId. The assertion expects not to catch `FlightNotFound` because the flightId in the request matches one in the repository.

Scenario 2: Passenger Detail Test
  Details:
    TestName: verifyPassengerDetail
    Description: This test ensures that the passenger details are saved properly before booking the flight.
  Execution:
    Arrange: Create a reservationRequest with valid passenger details.
    Act: Invoke the target method `bookFlight` with the created reservationRequest.
    Assert: Verify that `passengerRepository.save()` method was called.
  Validation:
    This test verifies that the passenger details from the request are used to save the passenger before booking the flight. The assertion expects `passengerRepository.save()` method to be called with the passenger from the request.

Scenario 3: Reservation Creation Test
  Details:
    TestName: verifyReservationCreation
    Description: This test ensures that the reservation is created correctly after the flight is booked.
  Execution:
    Arrange: Create a reservationRequest with valid data.
    Act: Invoke the target method `bookFlight` with the created reservationRequest.
    Assert: Verify that `reservationRepository.save()` method was called.
  Validation:
    This test ensures that a reservation is created in the repository when a flight is booked. The assertion expects `reservationRepository.save()` method to be called with a reservation containing the flight and passenger from the request.

Scenario 4: Itinerary Generation Test
  Details:
    TestName: verifyItineraryGeneration
    Description: This test ensures that the itinerary is generated correctly after the flight is booked.
  Execution:
    Arrange: Create a reservationRequest with valid data.
    Act: Invoke the target method `bookFlight` with the created reservationRequest.
    Assert: Verify that `pdfGenerator.generateItenary()` method was called.
  Validation:
    This test verifies that an itinerary is generated when a flight is booked. The assertion expects `pdfGenerator.generateItenary()` method to be called with the saved reservation and the correct file path.

Scenario 5: Itinerary Emailing Test
  Details:
    TestName: verifyItineraryEmailing
    Description: This test ensures that the itinerary is emailed correctly after the flight is booked.
  Execution:
    Arrange: Create a reservationRequest with valid data.
    Act: Invoke the target method `bookFlight` with the created reservationRequest.
    Assert: Verify that `emailUtil.sendItenary()` method was called.
  Validation:
    This test verifies that an email with the itinerary is sent after a flight is booked. The assertion expects `emailUtil.sendItenary()` method to be called with the correct email address and file path.
"""
*/

// ********RoostGPT********
import com.flightreservation.flightreservation.domains.Flight;
import com.flightreservation.flightreservation.domains.Passenger;
import com.flightreservation.flightreservation.domains.Reservation;
import com.flightreservation.flightreservation.dto.ReservationRequest;
import com.flightreservation.flightreservation.exceptions.FlightNotFound;
import com.flightreservation.flightreservation.repositories.FlightRepository;
import com.flightreservation.flightreservation.repositories.PassengerRepository;
import com.flightreservation.flightreservation.repositories.ReservationRepository;
import com.flightreservation.flightreservation.services.ReservationService;
import com.flightreservation.flightreservation.util.EmailUtil;
import com.flightreservation.flightreservation.util.PdfGenerator;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class ReservationServiceImplBookFlightTest {

	@InjectMocks
	private ReservationService reservationService;

	@Mock
	private FlightRepository flightRepository;

	@Mock
	private PassengerRepository passengerRepository;

	@Mock
	private ReservationRepository reservationRepository;

	@Mock
	private EmailUtil emailUtil;

	@Mock
	private PdfGenerator pdfGenerator;

	@Before
	public void setUp() throws Exception {
		reservationService = new ReservationService();
	}

	@Test
	public void testBookFlight() throws Exception {
		ReservationRequest reservationRequest = new ReservationRequest();
		reservationRequest.setFlightId(1L);

		Flight flight = new Flight();
		Passenger passenger = new Passenger();
		Reservation reservation = new Reservation();

		when(flightRepository.findById(1L)).thenReturn(Optional.of(flight));
		when(passengerRepository.save(any(Passenger.class))).thenReturn(passenger);
		when(reservationRepository.save(any(Reservation.class))).thenReturn(reservation);

		Reservation result = reservationService.bookFlight(reservationRequest);

		verify(pdfGenerator).generateItenary(any(Reservation.class), any(String.class));
		verify(emailUtil).sendItenary(any(String.class), any(String.class));

		assertNotEquals(result, null);
	}

	@Test(expected = FlightNotFound.class)
	public void testBookFlight_shouldThrowFlightNotFoundException() {
		ReservationRequest reservationRequest = new ReservationRequest();
		reservationRequest.setFlightId(1L);

		when(flightRepository.findById(1L)).thenReturn(Optional.empty());

		reservationService.bookFlight(reservationRequest);
	}

}
