
// ********RoostGPT********
/*
Test generated by RoostGPT for test flight-reservation-dm using AI Type  and AI Model

ROOST_METHOD_HASH=getLastName_026f18c38b
ROOST_METHOD_SIG_HASH=getLastName_4814a2dee7

Here are the JUnit test scenarios for the getLastName() method in the User entity:

Scenario 1: Valid Last Name Retrieval

Details:
  TestName: validLastNameRetrieval
  Description: This test verifies that the getLastName() method correctly retrieves the last name of a user when a valid last name is set.
Execution:
  Arrange: Create a User object and set a valid last name using the setLastName() method.
  Act: Invoke the getLastName() method on the User object.
  Assert: Use assertEquals to compare the retrieved last name with the expected last name.
Validation:
  The assertion verifies that the getLastName() method returns the correct last name that was set using setLastName().
  This test ensures that the basic functionality of retrieving the last name works as expected.

Scenario 2: Null Last Name Retrieval

Details:
  TestName: nullLastNameRetrieval
  Description: This test checks the behavior of the getLastName() method when the last name is set to null.
Execution:
  Arrange: Create a User object and set the last name to null using the setLastName() method.
  Act: Invoke the getLastName() method on the User object.
  Assert: Use assertNull to verify that the retrieved last name is null.
Validation:
  The assertion confirms that the getLastName() method returns null when the last name is explicitly set to null.
  This test ensures that the method handles null values correctly and doesn't throw any exceptions.

Scenario 3: Empty Last Name Retrieval

Details:
  TestName: emptyLastNameRetrieval
  Description: This test verifies the behavior of the getLastName() method when the last name is set to an empty string.
Execution:
  Arrange: Create a User object and set the last name to an empty string using the setLastName() method.
  Act: Invoke the getLastName() method on the User object.
  Assert: Use assertEquals to compare the retrieved last name with an empty string.
Validation:
  The assertion verifies that the getLastName() method returns an empty string when the last name is set to an empty string.
  This test ensures that the method handles empty strings correctly and doesn't modify or trim the value.

Scenario 4: Last Name Retrieval with Special Characters

Details:
  TestName: lastNameRetrievalWithSpecialCharacters
  Description: This test checks if the getLastName() method correctly retrieves a last name containing special characters.
Execution:
  Arrange: Create a User object and set a last name with special characters using the setLastName() method.
  Act: Invoke the getLastName() method on the User object.
  Assert: Use assertEquals to compare the retrieved last name with the expected last name containing special characters.
Validation:
  The assertion verifies that the getLastName() method returns the last name with special characters as expected.
  This test ensures that the method can handle and retrieve last names that include special characters without any issues.

Note: The test scenarios assume that the setLastName() method is implemented correctly and sets the last name as expected. If the setLastName() method is not present or behaves differently, the test scenarios may need to be adjusted accordingly.
*/

// ********RoostGPT********

package com.flightreservation.flightreservation.domains;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import javax.persistence.*;
import java.util.Set;

class UserGetLastNameTest {

	@Test
	@Tag("valid")
	@DisplayName("Valid Last Name Retrieval")
	void validLastNameRetrieval() {
		// Arrange
		User user = new User();
		String expectedLastName = "Doe";
		user.setLastName(expectedLastName);
		// Act
		String actualLastName = user.getLastName();
		// Assert
		assertEquals(expectedLastName, actualLastName);
	}

	@Test
	@Tag("boundary")
	@DisplayName("Null Last Name Retrieval")
	void nullLastNameRetrieval() {
		// Arrange
		User user = new User();
		user.setLastName(null);
		// Act
		String actualLastName = user.getLastName();
		// Assert
		assertNull(actualLastName);
	}

	@Test
	@Tag("boundary")
	@DisplayName("Empty Last Name Retrieval")
	void emptyLastNameRetrieval() {
		// Arrange
		User user = new User();
		String expectedLastName = "";
		user.setLastName(expectedLastName);
		// Act
		String actualLastName = user.getLastName();
		// Assert
		assertEquals(expectedLastName, actualLastName);
	}

	@Test
	@Tag("valid")
	@DisplayName("Last Name Retrieval with Special Characters")
	void lastNameRetrievalWithSpecialCharacters() {
		// Arrange
		User user = new User();
		String expectedLastName = "O'Connor-Smith";
		user.setLastName(expectedLastName);
		// Act
		String actualLastName = user.getLastName();
		// Assert
		assertEquals(expectedLastName, actualLastName);
	}

}