// ********RoostGPT********
/*
Test generated by RoostGPT for test flight-reservation-dm using AI Type Claude AI and AI Model claude-3-opus-20240229
ROOST_METHOD_HASH=setPhone_f6fe6c907a
ROOST_METHOD_SIG_HASH=setPhone_eaff40e9dc
Here are the JUnit test scenarios for the provided setPhone method:
Scenario 1: Valid Phone Number
Details:
  TestName: validPhoneNumber()
  Description: This test verifies that the setPhone method correctly sets a valid phone number.
Execution:
  Arrange: Create an instance of the class containing the setPhone method.
  Act: Invoke the setPhone method with a valid phone number as the parameter.
  Assert: Use JUnit assertions to verify that the phone field is set to the provided value.
Validation:
  The assertion checks that the phone field is correctly updated with the provided valid phone number.
  This test ensures that the setPhone method functions as expected when provided with valid input.
Scenario 2: Null Phone Number
Details:
  TestName: nullPhoneNumber()
  Description: This test verifies the behavior of the setPhone method when provided with a null phone number.
Execution:
  Arrange: Create an instance of the class containing the setPhone method.
  Act: Invoke the setPhone method with a null value as the parameter.
  Assert: Use JUnit assertions to verify that the phone field remains unchanged (null).
Validation:
  The assertion checks that the phone field is not modified when a null value is provided.
  This test ensures that the setPhone method handles null input gracefully and does not throw any exceptions.
Scenario 3: Empty Phone Number
Details:
  TestName: emptyPhoneNumber()
  Description: This test verifies the behavior of the setPhone method when provided with an empty phone number.
Execution:
  Arrange: Create an instance of the class containing the setPhone method.
  Act: Invoke the setPhone method with an empty string as the parameter.
  Assert: Use JUnit assertions to verify that the phone field is set to an empty string.
Validation:
  The assertion checks that the phone field is correctly updated with an empty string.
  This test ensures that the setPhone method allows setting an empty phone number.
Scenario 4: Phone Number with Special Characters
Details:
  TestName: phoneNumberWithSpecialCharacters()
  Description: This test verifies the behavior of the setPhone method when provided with a phone number containing special characters.
Execution:
  Arrange: Create an instance of the class containing the setPhone method.
  Act: Invoke the setPhone method with a phone number containing special characters as the parameter.
  Assert: Use JUnit assertions to verify that the phone field is set to the provided value.
Validation:
  The assertion checks that the phone field is correctly updated with the phone number containing special characters.
  This test ensures that the setPhone method allows setting phone numbers with special characters.
Scenario 5: Phone Number with Leading/Trailing Spaces
Details:
  TestName: phoneNumberWithLeadingTrailingSpaces()
  Description: This test verifies the behavior of the setPhone method when provided with a phone number containing leading/trailing spaces.
Execution:
  Arrange: Create an instance of the class containing the setPhone method.
  Act: Invoke the setPhone method with a phone number containing leading/trailing spaces as the parameter.
  Assert: Use JUnit assertions to verify that the phone field is set to the provided value (including spaces).
Validation:
  The assertion checks that the phone field is correctly updated with the phone number containing leading/trailing spaces.
  This test ensures that the setPhone method allows setting phone numbers with leading/trailing spaces.
Note: The test scenarios assume that the setPhone method does not perform any validation or formatting of the provided phone number. If there are specific validation or formatting requirements, additional test scenarios may be needed to cover those cases.
*/
// ********RoostGPT********
package com.flightreservation.flightreservation.domains;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;
import javax.persistence.Entity;
import org.junit.jupiter.api.*;

@Tag("com.flightreservation.flightreservation.domains")
@Tag("com.flightreservation.flightreservation.domains.setPhone")
class PassengerSetPhoneTest {

	private Passenger passenger;

	@BeforeEach
	void setUp() {
		passenger = new Passenger();
	}

	@Test
	void setPhone_ValidPhoneNumber_ShouldSetPhoneField() {
		String validPhoneNumber = "1234567890";
		passenger.setPhone(validPhoneNumber);
		assertEquals(validPhoneNumber, passenger.getPhone());
	}

	@Test
	void setPhone_NullPhoneNumber_ShouldNotModifyPhoneField() {
		passenger.setPhone(null);
		assertNull(passenger.getPhone());
	}

	@Test
	void setPhone_EmptyPhoneNumber_ShouldSetEmptyPhoneField() {
		String emptyPhoneNumber = "";
		passenger.setPhone(emptyPhoneNumber);
		assertEquals(emptyPhoneNumber, passenger.getPhone());
	}

	@ParameterizedTest
	@ValueSource(strings = { "123-456-7890", "(123) 456-7890", "+1 123 456 7890" })
	void setPhone_PhoneNumberWithSpecialCharacters_ShouldSetPhoneField(String phoneNumber) {
		passenger.setPhone(phoneNumber);
		assertEquals(phoneNumber, passenger.getPhone());
	}

	@Test
	void setPhone_PhoneNumberWithLeadingTrailingSpaces_ShouldSetPhoneFieldWithSpaces() {
		String phoneNumberWithSpaces = "  1234567890  ";
		passenger.setPhone(phoneNumberWithSpaces);
		assertEquals(phoneNumberWithSpaces, passenger.getPhone());
	}

}