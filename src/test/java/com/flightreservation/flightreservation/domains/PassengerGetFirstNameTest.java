
// ********RoostGPT********
/*
Test generated by RoostGPT for test flight-reservation-dm using AI Type  and AI Model

ROOST_METHOD_HASH=getFirstName_250655c872
ROOST_METHOD_SIG_HASH=getFirstName_94e06d272a

Here are the JUnit test scenarios for the getFirstName() method of the Passenger entity:

Scenario 1: Retrieve First Name of Passenger

Details:
  TestName: getFirstNameReturnsCorrectValue()
  Description: This test verifies that the getFirstName() method returns the correct value of the firstName field for a Passenger instance.
Execution:
  Arrange: Create a Passenger instance and set the firstName field to a known value using the setFirstName() method.
  Act: Call the getFirstName() method on the Passenger instance.
  Assert: Use assertEquals to compare the returned value with the expected firstName value.
Validation:
  The assertion verifies that the getFirstName() method correctly retrieves the value of the firstName field.
  This test ensures that the getter method functions as expected and returns the correct value set using the corresponding setter method.

Scenario 2: First Name is Null

Details:
  TestName: getFirstNameReturnsNullWhenNotSet()
  Description: This test checks that the getFirstName() method returns null when the firstName field has not been set for a Passenger instance.
Execution:
  Arrange: Create a Passenger instance without setting the firstName field.
  Act: Call the getFirstName() method on the Passenger instance.
  Assert: Use assertNull to verify that the returned value is null.
Validation:
  The assertion confirms that the getFirstName() method does not throw an exception and correctly returns null when the firstName field is not set.
  This test ensures that the getter method handles the case when the field is not initialized and returns an appropriate value (null) instead of throwing an error.

Scenario 3: First Name is Empty String

Details:
  TestName: getFirstNameReturnsEmptyStringWhenSetToEmpty()
  Description: This test verifies that the getFirstName() method returns an empty string when the firstName field is set to an empty string for a Passenger instance.
Execution:
  Arrange: Create a Passenger instance and set the firstName field to an empty string using the setFirstName() method.
  Act: Call the getFirstName() method on the Passenger instance.
  Assert: Use assertEquals to compare the returned value with an empty string.
Validation:
  The assertion confirms that the getFirstName() method correctly returns an empty string when the firstName field is set to an empty string.
  This test ensures that the getter method does not modify or trim the empty string value and returns it as is.

Note: The test scenarios assume that the Passenger entity has a default constructor and that the setFirstName() method is available to set the firstName field. If any additional constraints or validations are implemented in the setter method, they should be considered while creating the test scenarios.
*/

// ********RoostGPT********

package com.flightreservation.flightreservation.domains;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.*;
import javax.persistence.Entity;

class PassengerGetFirstNameTest {

	@Test
	@Tag("valid")
	void getFirstNameReturnsCorrectValue() {
		// Arrange
		Passenger passenger = new Passenger();
		String expectedFirstName = "John";
		passenger.setFirstName(expectedFirstName);
		// Act
		String actualFirstName = passenger.getFirstName();
		// Assert
		assertEquals(expectedFirstName, actualFirstName);
	}

	@Test
	@Tag("boundary")
	void getFirstNameReturnsNullWhenNotSet() {
		// Arrange
		Passenger passenger = new Passenger();
		// Act
		String actualFirstName = passenger.getFirstName();
		// Assert
		assertNull(actualFirstName);
	}

	@Test
	@Tag("boundary")
	void getFirstNameReturnsEmptyStringWhenSetToEmpty() {
		// Arrange
		Passenger passenger = new Passenger();
		String expectedFirstName = "";
		passenger.setFirstName(expectedFirstName);
		// Act
		String actualFirstName = passenger.getFirstName();
		// Assert
		assertEquals(expectedFirstName, actualFirstName);
	}

}