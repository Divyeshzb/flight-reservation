// ********RoostGPT********
/*
Test generated by RoostGPT for test flight-reservation-dm using AI Type Claude AI and AI Model claude-3-opus-20240229
ROOST_METHOD_HASH=setLastName_f94d757d3d
ROOST_METHOD_SIG_HASH=setLastName_4141db5e7c
Here are the JUnit test scenarios for the provided setLastName method:
Scenario 1: Setting a valid last name
Details:
  TestName: setValidLastName.
  Description: This test checks if the setLastName method correctly sets a valid last name for the user.
Execution:
  Arrange: Create a new instance of the user class.
  Act: Invoke the setLastName method with a valid last name as the parameter.
  Assert: Use assertEquals to verify that the lastName field of the user object is equal to the provided valid last name.
Validation:
  The assertion verifies that the setLastName method properly assigns the provided valid last name to the lastName field of the user object.
  This test ensures that the basic functionality of setting a last name works as expected.
Scenario 2: Setting an empty last name
Details:
  TestName: setEmptyLastName.
  Description: This test checks how the setLastName method handles setting an empty last name.
Execution:
  Arrange: Create a new instance of the user class.
  Act: Invoke the setLastName method with an empty string as the parameter.
  Assert: Use assertEquals to verify that the lastName field of the user object is set to an empty string.
Validation:
  The assertion verifies that the setLastName method allows setting an empty last name.
  This test ensures that the method does not throw an exception or reject empty last names, depending on the business requirements.
Scenario 3: Setting a null last name
Details:
  TestName: setNullLastName.
  Description: This test checks how the setLastName method handles setting a null last name.
Execution:
  Arrange: Create a new instance of the user class.
  Act: Invoke the setLastName method with null as the parameter.
  Assert: Use assertNull to verify that the lastName field of the user object is set to null.
Validation:
  The assertion verifies that the setLastName method allows setting a null last name.
  This test ensures that the method does not throw an exception or reject null last names, depending on the business requirements.
Scenario 4: Setting a last name with leading/trailing spaces
Details:
  TestName: setLastNameWithSpaces.
  Description: This test checks if the setLastName method trims leading/trailing spaces from the provided last name.
Execution:
  Arrange: Create a new instance of the user class.
  Act: Invoke the setLastName method with a last name containing leading/trailing spaces.
  Assert: Use assertEquals to verify that the lastName field of the user object is equal to the trimmed last name.
Validation:
  The assertion verifies that the setLastName method removes any leading/trailing spaces from the provided last name before setting it.
  This test ensures that the method handles last names with extra spaces consistently and stores them in a standardized format.
Scenario 5: Setting a last name with maximum allowed length
Details:
  TestName: setMaxLengthLastName.
  Description: This test checks if the setLastName method allows setting a last name with the maximum allowed length.
Execution:
  Arrange: Create a new instance of the user class and determine the maximum allowed length for the lastName field.
  Act: Invoke the setLastName method with a last name of the maximum allowed length.
  Assert: Use assertEquals to verify that the lastName field of the user object is equal to the provided maximum length last name.
Validation:
  The assertion verifies that the setLastName method successfully sets a last name with the maximum allowed length.
  This test ensures that the method does not truncate or reject last names that are at the upper limit of the allowed length.
These test scenarios cover various cases for the setLastName method, including setting a valid last name, handling empty and null last names, trimming extra spaces, and testing the maximum allowed length. They help ensure the proper functionality and behavior of the setLastName method under different conditions.
*/
// ********RoostGPT********
package com.flightreservation.flightreservation.domains;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;
import javax.persistence.Entity;
import org.junit.jupiter.api.*;

@Tag("com.flightreservation.flightreservation.domains")
@Tag("com.flightreservation.flightreservation.domains.setLastName")
class PassengerSetLastNameTest {

	@Test
	void setValidLastName() {
		Passenger passenger = new Passenger();
		String validLastName = "Smith";
		passenger.setLastName(validLastName);
		assertEquals(validLastName, passenger.getLastName());
	}

	@Test
	void setEmptyLastName() {
		Passenger passenger = new Passenger();
		String emptyLastName = "";
		passenger.setLastName(emptyLastName);
		assertEquals(emptyLastName, passenger.getLastName());
	}

	@Test
	void setNullLastName() {
		Passenger passenger = new Passenger();
		passenger.setLastName(null);
		assertNull(passenger.getLastName());
	}

	@ParameterizedTest
	@ValueSource(strings = { " Smith ", "   Johnson   ", "  Williams  " })
	void setLastNameWithSpaces(String lastNameWithSpaces) {
		Passenger passenger = new Passenger();
		passenger.setLastName(lastNameWithSpaces);
		assertEquals(lastNameWithSpaces.trim(), passenger.getLastName());
	}

	@Test
	void setMaxLengthLastName() {
		Passenger passenger = new Passenger();
		String maxLengthLastName = "A".repeat(50); // Assuming max length is 50 characters
		passenger.setLastName(maxLengthLastName);
		assertEquals(maxLengthLastName, passenger.getLastName());
	}

}