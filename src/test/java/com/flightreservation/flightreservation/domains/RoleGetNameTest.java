
// ********RoostGPT********
/*
Test generated by RoostGPT for test flight-reservation-dm using AI Type  and AI Model

ROOST_METHOD_HASH=getName_3a12ffc596
ROOST_METHOD_SIG_HASH=getName_8400ac6fb7

Here are the JUnit test scenarios for the getName() method of the Role entity:

Scenario 1: Get Role Name

Details:
  TestName: getNameReturnsRoleName()
  Description: This test verifies that the getName() method returns the correct role name when a valid Role object is used.
Execution:
  Arrange: Create a Role object with a specific name.
  Act: Call the getName() method on the Role object.
  Assert: Use assertEquals to compare the returned name with the expected role name.
Validation:
  The assertion checks if the getName() method returns the exact role name that was set during the Role object creation.
  This test ensures that the getName() method correctly retrieves the role name, which is crucial for identifying and managing user roles in the application.

Scenario 2: Get Name of Role with Null Name

Details:
  TestName: getNameReturnsNullForRoleWithNullName()
  Description: This test verifies that the getName() method returns null when the role name is set to null.
Execution:
  Arrange: Create a Role object with a null name.
  Act: Call the getName() method on the Role object.
  Assert: Use assertNull to check if the returned name is null.
Validation:
  The assertion ensures that the getName() method handles the case when the role name is null and returns null accordingly.
  This test validates that the method does not throw an exception or return an unexpected value when the role name is null, maintaining the consistency and reliability of the application.

Scenario 3: Get Name of Role with Empty Name

Details:
  TestName: getNameReturnsEmptyStringForRoleWithEmptyName()
  Description: This test verifies that the getName() method returns an empty string when the role name is set to an empty string.
Execution:
  Arrange: Create a Role object with an empty string as the name.
  Act: Call the getName() method on the Role object.
  Assert: Use assertEquals to compare the returned name with an empty string.
Validation:
  The assertion checks if the getName() method returns an empty string when the role name is set to an empty string.
  This test ensures that the method handles the case of an empty role name correctly and does not return null or any other unexpected value, maintaining the consistency and reliability of the application.

Note: Since the provided code snippet only includes the getName() method and does not provide information about the Role constructor or setter methods, the test scenarios assume the existence of a constructor or setter method to create a Role object with a specific name. If such methods are not available, the test scenarios would need to be adjusted accordingly.
*/

// ********RoostGPT********

package com.flightreservation.flightreservation.domains;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import org.springframework.security.core.GrantedAuthority;
import javax.persistence.Entity;
import javax.persistence.ManyToMany;
import java.util.Set;

class RoleGetNameTest {

	@Test
	@Tag("valid")
	void getNameReturnsRoleName() {
		// Arrange
		String expectedName = "ADMIN";
		Role role = new Role();
		role.setName(expectedName);
		// Act
		String actualName = role.getName();
		// Assert
		assertEquals(expectedName, actualName);
	}

	@Test
	@Tag("boundary")
	void getNameReturnsNullForRoleWithNullName() {
		// Arrange
		Role role = new Role();
		role.setName(null);
		// Act
		String actualName = role.getName();
		// Assert
		assertNull(actualName);
	}

	@Test
	@Tag("boundary")
	void getNameReturnsEmptyStringForRoleWithEmptyName() {
		// Arrange
		String expectedName = "";
		Role role = new Role();
		role.setName(expectedName);
		// Act
		String actualName = role.getName();
		// Assert
		assertEquals(expectedName, actualName);
	}

}