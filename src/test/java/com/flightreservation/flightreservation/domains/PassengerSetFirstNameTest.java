// ********RoostGPT********
/*
Test generated by RoostGPT for test flight-reservation-dm using AI Type Claude AI and AI Model claude-3-opus-20240229
ROOST_METHOD_HASH=setFirstName_fee32e9ae7
ROOST_METHOD_SIG_HASH=setFirstName_8acaec2cfc
Here are the JUnit test scenarios for the setFirstName method:
Scenario 1: Valid First Name
Details:
  TestName: setFirstNameWithValidValue
  Description: This test verifies that the setFirstName method correctly sets the firstName field when a valid first name is provided.
Execution:
  Arrange: Create an instance of the class containing the setFirstName method.
  Act: Invoke the setFirstName method with a valid first name value.
  Assert: Use assertEquals to verify that the firstName field is set to the provided value.
Validation:
  The assertion ensures that the firstName field is updated correctly when a valid first name is passed to the setFirstName method.
  This test is important to validate that the basic functionality of setting the first name works as expected.
Scenario 2: Null First Name
Details:
  TestName: setFirstNameWithNullValue
  Description: This test checks the behavior of the setFirstName method when a null value is passed as the first name.
Execution:
  Arrange: Create an instance of the class containing the setFirstName method.
  Act: Invoke the setFirstName method with a null value.
  Assert: Use assertNull to verify that the firstName field remains null after invoking the method.
Validation:
  The assertion confirms that the setFirstName method handles null values gracefully and does not throw any exceptions.
  This test is crucial to ensure that the method can handle null inputs without causing any unexpected behavior or crashes in the application.
Scenario 3: Empty First Name
Details:
  TestName: setFirstNameWithEmptyValue
  Description: This test verifies the behavior of the setFirstName method when an empty string is passed as the first name.
Execution:
  Arrange: Create an instance of the class containing the setFirstName method.
  Act: Invoke the setFirstName method with an empty string value.
  Assert: Use assertEquals to verify that the firstName field is set to an empty string.
Validation:
  The assertion ensures that the setFirstName method allows setting the firstName field to an empty string.
  This test is important to validate that the method can handle empty string inputs and sets the firstName field accordingly.
Scenario 4: First Name with Leading/Trailing Whitespace
Details:
  TestName: setFirstNameWithLeadingTrailingWhitespace
  Description: This test checks if the setFirstName method trims any leading or trailing whitespace from the provided first name.
Execution:
  Arrange: Create an instance of the class containing the setFirstName method.
  Act: Invoke the setFirstName method with a first name value containing leading and trailing whitespace.
  Assert: Use assertEquals to verify that the firstName field is set to the trimmed value (without leading/trailing whitespace).
Validation:
  The assertion confirms that the setFirstName method automatically trims any leading or trailing whitespace from the provided first name.
  This test is important to ensure data consistency and prevent any formatting issues caused by unintended whitespace.
Scenario 5: First Name with Maximum Length
Details:
  TestName: setFirstNameWithMaximumLength
  Description: This test verifies the behavior of the setFirstName method when a first name with the maximum allowed length is provided.
Execution:
  Arrange: Create an instance of the class containing the setFirstName method.
  Act: Invoke the setFirstName method with a first name value that has the maximum allowed length.
  Assert: Use assertEquals to verify that the firstName field is set to the provided value.
Validation:
  The assertion ensures that the setFirstName method can handle and store first names with the maximum allowed length.
  This test is important to validate that the method does not truncate or reject valid first names that reach the maximum length limit.
Note: The maximum length of the firstName field may depend on the specific requirements or constraints of the application, such as database field size limits.
These test scenarios cover various aspects of the setFirstName method, including valid inputs, null and empty values, whitespace handling, and maximum length validation. They aim to ensure the robustness and reliability of the method in different scenarios.
*/
// ********RoostGPT********
package com.flightreservation.flightreservation.domains;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.NullSource;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import javax.persistence.Entity;
import org.junit.jupiter.api.*;

@Tag("com.flightreservation.flightreservation.domains")
@Tag("com.flightreservation.flightreservation.domains.setFirstName")
class PassengerSetFirstNameTest {

	private Passenger passenger;

	@BeforeEach
	void setUp() {
		passenger = new Passenger();
	}

	@Test
	void setFirstNameWithValidValue() {
		String validFirstName = "John";
		passenger.setFirstName(validFirstName);
		assertEquals(validFirstName, passenger.getFirstName());
	}

	@ParameterizedTest
	@NullSource
	void setFirstNameWithNullValue(String nullFirstName) {
		passenger.setFirstName(nullFirstName);
		assertNull(passenger.getFirstName());
	}

	@ParameterizedTest
	@ValueSource(strings = { "", " " })
	void setFirstNameWithEmptyValue(String emptyFirstName) {
		passenger.setFirstName(emptyFirstName);
		assertEquals(emptyFirstName, passenger.getFirstName());
	}

	@Test
	void setFirstNameWithLeadingTrailingWhitespace() {
		String firstNameWithWhitespace = "  John  ";
		passenger.setFirstName(firstNameWithWhitespace);
		assertEquals(firstNameWithWhitespace.trim(), passenger.getFirstName());
	}

	@ParameterizedTest
	@CsvSource({ "John, John", "Johnathon, Johnathon", "Johnathonathon, Johnathonathon" })
	void setFirstNameWithMaximumLength(String input, String expected) {
		passenger.setFirstName(input);
		assertEquals(expected, passenger.getFirstName());
	}

}