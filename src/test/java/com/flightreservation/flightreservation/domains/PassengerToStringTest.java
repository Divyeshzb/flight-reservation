// ********RoostGPT********
/*
Test generated by RoostGPT for test flight-reservation-dm using AI Type Claude AI and AI Model claude-3-opus-20240229
ROOST_METHOD_HASH=toString_9c9e32f5fa
ROOST_METHOD_SIG_HASH=toString_bbffdadaa2
Here are the JUnit test scenarios for the provided toString() method:
Scenario 1: Test toString() with all fields populated
Details:
  TestName: toStringWithAllFieldsPopulated()
  Description: This test verifies that the toString() method returns the expected string representation when all fields (firstName, middleName, lastName, email, phone) are populated with non-null values.
Execution:
  Arrange: Create a Passenger object and set all fields with valid non-null values.
  Act: Invoke the toString() method on the Passenger object.
  Assert: Use JUnit assertions to verify that the returned string matches the expected format and includes the correct field values.
Validation:
  The assertion ensures that the toString() method properly concatenates all field values into the expected string format.
  This test is important to validate that the toString() method provides a meaningful string representation of the Passenger object when all fields are populated.
Scenario 2: Test toString() with null firstName
Details:
  TestName: toStringWithNullFirstName()
  Description: This test verifies that the toString() method handles a null firstName gracefully and returns the expected string representation.
Execution:
  Arrange: Create a Passenger object and set all fields except firstName with valid non-null values. Set firstName to null.
  Act: Invoke the toString() method on the Passenger object.
  Assert: Use JUnit assertions to verify that the returned string matches the expected format and includes "null" for the firstName field.
Validation:
  The assertion ensures that the toString() method properly handles a null firstName and includes "null" in the string representation.
  This test is important to validate that the toString() method does not throw a NullPointerException and provides a consistent string representation even when firstName is null.
Scenario 3: Test toString() with null middleName
Details:
  TestName: toStringWithNullMiddleName()
  Description: This test verifies that the toString() method handles a null middleName gracefully and returns the expected string representation.
Execution:
  Arrange: Create a Passenger object and set all fields except middleName with valid non-null values. Set middleName to null.
  Act: Invoke the toString() method on the Passenger object.
  Assert: Use JUnit assertions to verify that the returned string matches the expected format and includes "null" for the middleName field.
Validation:
  The assertion ensures that the toString() method properly handles a null middleName and includes "null" in the string representation.
  This test is important to validate that the toString() method does not throw a NullPointerException and provides a consistent string representation even when middleName is null.
Scenario 4: Test toString() with null lastName
Details:
  TestName: toStringWithNullLastName()
  Description: This test verifies that the toString() method handles a null lastName gracefully and returns the expected string representation.
Execution:
  Arrange: Create a Passenger object and set all fields except lastName with valid non-null values. Set lastName to null.
  Act: Invoke the toString() method on the Passenger object.
  Assert: Use JUnit assertions to verify that the returned string matches the expected format and includes "null" for the lastName field.
Validation:
  The assertion ensures that the toString() method properly handles a null lastName and includes "null" in the string representation.
  This test is important to validate that the toString() method does not throw a NullPointerException and provides a consistent string representation even when lastName is null.
Scenario 5: Test toString() with null email
Details:
  TestName: toStringWithNullEmail()
  Description: This test verifies that the toString() method handles a null email gracefully and returns the expected string representation.
Execution:
  Arrange: Create a Passenger object and set all fields except email with valid non-null values. Set email to null.
  Act: Invoke the toString() method on the Passenger object.
  Assert: Use JUnit assertions to verify that the returned string matches the expected format and includes "null" for the email field.
Validation:
  The assertion ensures that the toString() method properly handles a null email and includes "null" in the string representation.
  This test is important to validate that the toString() method does not throw a NullPointerException and provides a consistent string representation even when email is null.
Scenario 6: Test toString() with null phone
Details:
  TestName: toStringWithNullPhone()
  Description: This test verifies that the toString() method handles a null phone gracefully and returns the expected string representation.
Execution:
  Arrange: Create a Passenger object and set all fields except phone with valid non-null values. Set phone to null.
  Act: Invoke the toString() method on the Passenger object.
  Assert: Use JUnit assertions to verify that the returned string matches the expected format and includes "null" for the phone field.
Validation:
  The assertion ensures that the toString() method properly handles a null phone and includes "null" in the string representation.
  This test is important to validate that the toString() method does not throw a NullPointerException and provides a consistent string representation even when phone is null.
These test scenarios cover various cases, including when all fields are populated and when each field is individually set to null. They ensure that the toString() method handles null values gracefully and returns the expected string representation in each scenario.
*/
// ********RoostGPT********
package com.flightreservation.flightreservation.domains;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import javax.persistence.Entity;
import org.junit.jupiter.api.*;

@Tag("com.flightreservation.flightreservation.domains")
@Tag("com.flightreservation.flightreservation.domains.toString")
class PassengerToStringTest {

	@Test
	void toStringWithAllFieldsPopulated() {
		// Arrange
		Passenger passenger = new Passenger();
		passenger.setFirstName("John");
		passenger.setMiddleName("Doe");
		passenger.setLastName("Smith");
		passenger.setEmail("john@example.com");
		passenger.setPhone("1234567890");
		// Act
		String result = passenger.toString();
		// Assert
		assertEquals(
				"Passenger{firstName='John', middleName='Doe', lastName='Smith', email='john@example.com', phone='1234567890'}",
				result);
	}

	@Test
	void toStringWithNullFirstName() {
		// Arrange
		Passenger passenger = new Passenger();
		passenger.setMiddleName("Doe");
		passenger.setLastName("Smith");
		passenger.setEmail("john@example.com");
		passenger.setPhone("1234567890");
		// Act
		String result = passenger.toString();
		// Assert
		assertEquals(
				"Passenger{firstName='null', middleName='Doe', lastName='Smith', email='john@example.com', phone='1234567890'}",
				result);
	}

	@Test
	void toStringWithNullMiddleName() {
		// Arrange
		Passenger passenger = new Passenger();
		passenger.setFirstName("John");
		passenger.setLastName("Smith");
		passenger.setEmail("john@example.com");
		passenger.setPhone("1234567890");
		// Act
		String result = passenger.toString();
		// Assert
		assertEquals(
				"Passenger{firstName='John', middleName='null', lastName='Smith', email='john@example.com', phone='1234567890'}",
				result);
	}

	@Test
	void toStringWithNullLastName() {
		// Arrange
		Passenger passenger = new Passenger();
		passenger.setFirstName("John");
		passenger.setMiddleName("Doe");
		passenger.setEmail("john@example.com");
		passenger.setPhone("1234567890");
		// Act
		String result = passenger.toString();
		// Assert
		assertEquals(
				"Passenger{firstName='John', middleName='Doe', lastName='null', email='john@example.com', phone='1234567890'}",
				result);
	}

	@Test
	void toStringWithNullEmail() {
		// Arrange
		Passenger passenger = new Passenger();
		passenger.setFirstName("John");
		passenger.setMiddleName("Doe");
		passenger.setLastName("Smith");
		passenger.setPhone("1234567890");
		// Act
		String result = passenger.toString();
		// Assert
		assertEquals(
				"Passenger{firstName='John', middleName='Doe', lastName='Smith', email='null', phone='1234567890'}",
				result);
	}

	@Test
	void toStringWithNullPhone() {
		// Arrange
		Passenger passenger = new Passenger();
		passenger.setFirstName("John");
		passenger.setMiddleName("Doe");
		passenger.setLastName("Smith");
		passenger.setEmail("john@example.com");
		// Act
		String result = passenger.toString();
		// Assert
		assertEquals(
				"Passenger{firstName='John', middleName='Doe', lastName='Smith', email='john@example.com', phone='null'}",
				result);
	}

}