// ********RoostGPT********
/*
Test generated by RoostGPT for test flight-reservation-dm using AI Type Claude AI and AI Model claude-3-opus-20240229
ROOST_METHOD_HASH=getMiddleName_b9783483c1
ROOST_METHOD_SIG_HASH=getMiddleName_e4a286331a
Here are the JUnit test scenarios for the getMiddleName() method:
Scenario 1: Test retrieving middle name when it is set
Details:
  TestName: getMiddleNameWhenSet()
  Description: This test checks if the getMiddleName() method returns the correct middle name when it is set.
Execution:
  Arrange: Create an instance of the class and set the middleName field to a non-null value.
  Act: Call the getMiddleName() method.
  Assert: Use assertEquals to verify that the returned value matches the set middleName.
Validation:
  The assertion verifies that the getMiddleName() method correctly retrieves the middleName field value.
  This test ensures that the getter method functions as expected when the middle name is provided.
Scenario 2: Test retrieving middle name when it is null
Details:
  TestName: getMiddleNameWhenNull()
  Description: This test checks if the getMiddleName() method returns null when the middleName field is not set.
Execution:
  Arrange: Create an instance of the class and leave the middleName field as null.
  Act: Call the getMiddleName() method.
  Assert: Use assertNull to verify that the returned value is null.
Validation:
  The assertion verifies that the getMiddleName() method returns null when the middleName field is not set.
  This test ensures that the getter method handles the case when the middle name is not provided.
Scenario 3: Test retrieving middle name when it is an empty string
Details:
  TestName: getMiddleNameWhenEmpty()
  Description: This test checks if the getMiddleName() method returns an empty string when the middleName field is set to an empty string.
Execution:
  Arrange: Create an instance of the class and set the middleName field to an empty string.
  Act: Call the getMiddleName() method.
  Assert: Use assertEquals to verify that the returned value is an empty string.
Validation:
  The assertion verifies that the getMiddleName() method correctly returns an empty string when the middleName field is set to an empty string.
  This test ensures that the getter method handles the case when the middle name is provided as an empty string.
Scenario 4: Test retrieving middle name when it contains special characters
Details:
  TestName: getMiddleNameWithSpecialCharacters()
  Description: This test checks if the getMiddleName() method returns the correct middle name when it contains special characters.
Execution:
  Arrange: Create an instance of the class and set the middleName field to a value containing special characters.
  Act: Call the getMiddleName() method.
  Assert: Use assertEquals to verify that the returned value matches the set middleName with special characters.
Validation:
  The assertion verifies that the getMiddleName() method correctly retrieves the middleName field value even when it contains special characters.
  This test ensures that the getter method can handle middle names with special characters.
Note: Since the provided method is a simple getter method without any complex logic or dependencies, the test scenarios are focused on verifying the basic functionality and handling of different input cases.
*/
// ********RoostGPT********
package com.flightreservation.flightreservation.domains;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import javax.persistence.Entity;
import org.junit.jupiter.api.*;

@Tag("com.flightreservation.flightreservation.domains")
@Tag("com.flightreservation.flightreservation.domains.getMiddleName")
class PassengerGetMiddleNameTest {

	@Test
	void getMiddleNameWhenSet() {
		// Arrange
		Passenger passenger = new Passenger();
		passenger.setMiddleName("John");
		// Act
		String result = passenger.getMiddleName();
		// Assert
		assertEquals("John", result);
	}

	@Test
	void getMiddleNameWhenNull() {
		// Arrange
		Passenger passenger = new Passenger();
		// Act
		String result = passenger.getMiddleName();
		// Assert
		assertNull(result);
	}

	@Test
	void getMiddleNameWhenEmpty() {
		// Arrange
		Passenger passenger = new Passenger();
		passenger.setMiddleName("");
		// Act
		String result = passenger.getMiddleName();
		// Assert
		assertEquals("", result);
	}

	@Test
	void getMiddleNameWithSpecialCharacters() {
		// Arrange
		Passenger passenger = new Passenger();
		passenger.setMiddleName("John-Doe");
		// Act
		String result = passenger.getMiddleName();
		// Assert
		assertEquals("John-Doe", result);
	}

}