
// ********RoostGPT********
/*
Test generated by RoostGPT for test flight-reservation-dm using AI Type  and AI Model

ROOST_METHOD_HASH=getLastName_026f18c38b
ROOST_METHOD_SIG_HASH=getLastName_4814a2dee7

Here are the JUnit test scenarios for the getLastName() method in the Passenger entity:

Scenario 1: Test getLastName with a valid last name

Details:
  TestName: getLastNameWithValidName()
  Description: This test verifies that the getLastName() method returns the correct last name when a valid last name is set.
Execution:
  Arrange: Create a Passenger instance and set a valid last name using the setLastName() method.
  Act: Call the getLastName() method on the Passenger instance.
  Assert: Use assertEquals to compare the returned last name with the expected last name.
Validation:
  The assertion verifies that the getLastName() method correctly retrieves the last name that was set using the setLastName() method.
  This test ensures that the getLastName() method functions as expected and maintains data integrity.

Scenario 2: Test getLastName with a null last name

Details:
  TestName: getLastNameWithNullName()
  Description: This test checks the behavior of the getLastName() method when the last name is set to null.
Execution:
  Arrange: Create a Passenger instance and set the last name to null using the setLastName() method.
  Act: Call the getLastName() method on the Passenger instance.
  Assert: Use assertNull to verify that the returned last name is null.
Validation:
  The assertion verifies that the getLastName() method returns null when the last name is set to null.
  This test ensures that the getLastName() method handles null values correctly and doesn't throw any exceptions.

Scenario 3: Test getLastName with an empty last name

Details:
  TestName: getLastNameWithEmptyName()
  Description: This test verifies the behavior of the getLastName() method when the last name is set to an empty string.
Execution:
  Arrange: Create a Passenger instance and set the last name to an empty string using the setLastName() method.
  Act: Call the getLastName() method on the Passenger instance.
  Assert: Use assertEquals to compare the returned last name with an empty string.
Validation:
  The assertion verifies that the getLastName() method returns an empty string when the last name is set to an empty string.
  This test ensures that the getLastName() method handles empty strings correctly and doesn't modify the value.

Scenario 4: Test getLastName after updating the last name

Details:
  TestName: getLastNameAfterUpdate()
  Description: This test verifies that the getLastName() method returns the updated last name after it is modified using the setLastName() method.
Execution:
  Arrange: Create a Passenger instance and set an initial last name using the setLastName() method.
  Act: Update the last name using the setLastName() method with a new value, then call the getLastName() method.
  Assert: Use assertEquals to compare the returned last name with the updated last name.
Validation:
  The assertion verifies that the getLastName() method correctly retrieves the updated last name after it is modified.
  This test ensures that the getLastName() method always returns the most recent value set by the setLastName() method.

Note: The test scenarios assume that the setLastName() method is implemented correctly and functions as expected. If the setLastName() method is not present or has a different signature, the test scenarios would need to be adjusted accordingly.
*/

// ********RoostGPT********

package com.flightreservation.flightreservation.domains;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import javax.persistence.Entity;

class PassengerGetLastNameTest {

	@Test
	@Tag("valid")
	void getLastNameWithValidName() {
		// Arrange
		Passenger passenger = new Passenger();
		String expectedLastName = "Doe";
		passenger.setLastName(expectedLastName);
		// Act
		String actualLastName = passenger.getLastName();
		// Assert
		assertEquals(expectedLastName, actualLastName);
	}

	@Test
	@Tag("invalid")
	void getLastNameWithNullName() {
		// Arrange
		Passenger passenger = new Passenger();
		passenger.setLastName(null);
		// Act
		String actualLastName = passenger.getLastName();
		// Assert
		assertNull(actualLastName);
	}

	@Test
	@Tag("boundary")
	void getLastNameWithEmptyName() {
		// Arrange
		Passenger passenger = new Passenger();
		String expectedLastName = "";
		passenger.setLastName(expectedLastName);
		// Act
		String actualLastName = passenger.getLastName();
		// Assert
		assertEquals(expectedLastName, actualLastName);
	}

	@Test
	@Tag("valid")
	void getLastNameAfterUpdate() {
		// Arrange
		Passenger passenger = new Passenger();
		passenger.setLastName("Doe");
		String expectedLastName = "Smith";
		passenger.setLastName(expectedLastName);
		// Act
		String actualLastName = passenger.getLastName();
		// Assert
		assertEquals(expectedLastName, actualLastName);
	}

}