
// ********RoostGPT********
/*
Test generated by RoostGPT for test flight-reservation-dm using AI Type  and AI Model

ROOST_METHOD_HASH=getPhone_705c77f90a
ROOST_METHOD_SIG_HASH=getPhone_39409e28ac

Here are the JUnit test scenarios for the getPhone() method in the Passenger entity:

Scenario 1: Get Phone Number

Details:
  TestName: getPhoneReturnsCorrectValue()
  Description: This test verifies that the getPhone() method returns the correct phone number value stored in the Passenger entity.
Execution:
  Arrange: Create a Passenger object and set a phone number value using the setPhone() method.
  Act: Call the getPhone() method on the Passenger object.
  Assert: Use assertEquals to compare the returned phone number with the expected value.
Validation:
  The assertion ensures that the getPhone() method retrieves the phone number accurately from the Passenger entity.
  This test is important to validate that the getter method functions correctly and returns the expected value.

Scenario 2: Get Phone Number When Not Set

Details:
  TestName: getPhoneReturnsNullWhenNotSet()
  Description: This test checks that the getPhone() method returns null when no phone number is set in the Passenger entity.
Execution:
  Arrange: Create a Passenger object without setting a phone number value.
  Act: Call the getPhone() method on the Passenger object.
  Assert: Use assertNull to verify that the returned phone number is null.
Validation:
  The assertion confirms that the getPhone() method handles the case when no phone number is set and returns null.
  This test ensures that the getter method does not throw an exception or return an unexpected value when the phone number is not initialized.

Scenario 3: Get Phone Number After Setting Empty String

Details:
  TestName: getPhoneReturnsEmptyStringWhenSetToEmpty()
  Description: This test verifies that the getPhone() method returns an empty string when the phone number is set to an empty string in the Passenger entity.
Execution:
  Arrange: Create a Passenger object and set the phone number value to an empty string using the setPhone() method.
  Act: Call the getPhone() method on the Passenger object.
  Assert: Use assertEquals to compare the returned phone number with an empty string.
Validation:
  The assertion ensures that the getPhone() method correctly returns an empty string when the phone number is set to an empty string.
  This test validates that the getter method handles empty string values appropriately and does not modify or trim the value.

Scenario 4: Get Phone Number After Setting Long Value

Details:
  TestName: getPhoneReturnsLongValueWhenSet()
  Description: This test checks that the getPhone() method returns the correct phone number value when a long phone number is set in the Passenger entity.
Execution:
  Arrange: Create a Passenger object and set a long phone number value using the setPhone() method.
  Act: Call the getPhone() method on the Passenger object.
  Assert: Use assertEquals to compare the returned phone number with the expected long value.
Validation:
  The assertion verifies that the getPhone() method can handle and return long phone number values accurately.
  This test ensures that the getter method does not truncate or modify long phone number values.

These test scenarios cover different aspects of the getPhone() method, including retrieving the correct phone number value, handling null and empty string values, and supporting long phone number values. They help ensure the reliability and correctness of the getPhone() method in the Passenger entity.
*/

// ********RoostGPT********

package com.flightreservation.flightreservation.domains;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import javax.persistence.Entity;

class PassengerGetPhoneTest {

	@Test
	@Tag("valid")
	void getPhoneReturnsCorrectValue() {
		// Arrange
		Passenger passenger = new Passenger();
		String expectedPhone = "1234567890";
		passenger.setPhone(expectedPhone);
		// Act
		String actualPhone = passenger.getPhone();
		// Assert
		assertEquals(expectedPhone, actualPhone);
	}

	@Test
	@Tag("boundary")
	void getPhoneReturnsNullWhenNotSet() {
		// Arrange
		Passenger passenger = new Passenger();
		// Act
		String actualPhone = passenger.getPhone();
		// Assert
		assertNull(actualPhone);
	}

	@Test
	@Tag("boundary")
	void getPhoneReturnsEmptyStringWhenSetToEmpty() {
		// Arrange
		Passenger passenger = new Passenger();
		String emptyPhone = "";
		passenger.setPhone(emptyPhone);
		// Act
		String actualPhone = passenger.getPhone();
		// Assert
		assertEquals(emptyPhone, actualPhone);
	}

	@Test
	@Tag("valid")
	void getPhoneReturnsLongValueWhenSet() {
		// Arrange
		Passenger passenger = new Passenger();
		String longPhone = "1234567890123456789012345678901234567890";
		passenger.setPhone(longPhone);
		// Act
		String actualPhone = passenger.getPhone();
		// Assert
		assertEquals(longPhone, actualPhone);
	}

}