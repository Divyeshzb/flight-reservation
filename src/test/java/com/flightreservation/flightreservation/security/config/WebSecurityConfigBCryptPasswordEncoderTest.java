
// ********RoostGPT********
/*
Test generated by RoostGPT for test flight-reservation-dm using AI Type  and AI Model

ROOST_METHOD_HASH=bCryptPasswordEncoder_ac2e8c32f6
ROOST_METHOD_SIG_HASH=bCryptPasswordEncoder_179551df31

Here are the JUnit test scenarios for the bCryptPasswordEncoder() method in the WebSecurityConfig entity:

Scenario 1: Verify BCryptPasswordEncoder Bean Creation

Details:
  TestName: bCryptPasswordEncoderBeanCreation()
  Description: This test verifies that the bCryptPasswordEncoder() method creates and returns a valid BCryptPasswordEncoder bean.
Execution:
  Arrange: Create an instance of the WebSecurityConfig class.
  Act: Invoke the bCryptPasswordEncoder() method.
  Assert: Assert that the returned object is an instance of BCryptPasswordEncoder.
Validation:
  The assertion ensures that the bCryptPasswordEncoder() method correctly creates and returns a BCryptPasswordEncoder bean.
  This test is important to validate that the password encoding functionality is properly configured and available for use in the application.

Scenario 2: Verify Password Encoding

Details:
  TestName: passwordEncoding()
  Description: This test verifies that the BCryptPasswordEncoder bean created by the bCryptPasswordEncoder() method correctly encodes passwords.
Execution:
  Arrange: Create an instance of the WebSecurityConfig class and obtain the BCryptPasswordEncoder bean by invoking the bCryptPasswordEncoder() method.
  Act: Encode a sample password using the BCryptPasswordEncoder bean.
  Assert: Assert that the encoded password is not null and not equal to the original password.
Validation:
  The assertions ensure that the BCryptPasswordEncoder bean successfully encodes passwords and produces a different encoded value compared to the original password.
  This test validates that the password encoding functionality works as expected, providing security by hashing passwords before storing them.

Scenario 3: Verify Password Matching

Details:
  TestName: passwordMatching()
  Description: This test verifies that the BCryptPasswordEncoder bean created by the bCryptPasswordEncoder() method correctly matches encoded passwords with their original values.
Execution:
  Arrange: Create an instance of the WebSecurityConfig class and obtain the BCryptPasswordEncoder bean by invoking the bCryptPasswordEncoder() method. Encode a sample password using the BCryptPasswordEncoder bean.
  Act: Use the BCryptPasswordEncoder bean to match the encoded password with the original password.
  Assert: Assert that the password matching returns true.
Validation:
  The assertion ensures that the BCryptPasswordEncoder bean successfully matches an encoded password with its original value.
  This test validates that the password matching functionality works correctly, allowing for secure password verification during authentication.

Scenario 4: Verify Bean Singleton Behavior

Details:
  TestName: bCryptPasswordEncoderSingletonBehavior()
  Description: This test verifies that the bCryptPasswordEncoder() method returns the same instance of BCryptPasswordEncoder bean across multiple invocations.
Execution:
  Arrange: Create an instance of the WebSecurityConfig class.
  Act: Invoke the bCryptPasswordEncoder() method twice and store the returned instances in separate variables.
  Assert: Assert that the two instances are the same object using reference equality.
Validation:
  The assertion ensures that the bCryptPasswordEncoder() method returns the same singleton instance of BCryptPasswordEncoder bean.
  This test validates that the bean is properly scoped as a singleton, ensuring consistent behavior and avoiding unnecessary object creation.

These test scenarios cover the basic functionality and behavior of the bCryptPasswordEncoder() method in the WebSecurityConfig entity. They verify the creation of the BCryptPasswordEncoder bean, password encoding, password matching, and the singleton behavior of the bean. These tests help ensure the correctness and security of the password encoding mechanism in the application.
*/

// ********RoostGPT********

package com.flightreservation.flightreservation.security.config;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;

class WebSecurityConfigBCryptPasswordEncoderTest {

	@Test
	@Tag("valid")
	void bCryptPasswordEncoderBeanCreation() {
		// Arrange
		WebSecurityConfig webSecurityConfig = new WebSecurityConfig();
		// Act
		BCryptPasswordEncoder bCryptPasswordEncoder = webSecurityConfig.bCryptPasswordEncoder();
		// Assert
		assertNotNull(bCryptPasswordEncoder);
		assertTrue(bCryptPasswordEncoder instanceof BCryptPasswordEncoder);
	}

	@Test
	@Tag("valid")
	void passwordEncoding() {
		// Arrange
		WebSecurityConfig webSecurityConfig = new WebSecurityConfig();
		BCryptPasswordEncoder bCryptPasswordEncoder = webSecurityConfig.bCryptPasswordEncoder();
		String password = "password123";
		// Act
		String encodedPassword = bCryptPasswordEncoder.encode(password);
		// Assert
		assertNotNull(encodedPassword);
		assertNotEquals(password, encodedPassword);
	}

	@Test
	@Tag("valid")
	void passwordMatching() {
		// Arrange
		WebSecurityConfig webSecurityConfig = new WebSecurityConfig();
		BCryptPasswordEncoder bCryptPasswordEncoder = webSecurityConfig.bCryptPasswordEncoder();
		String password = "password123";
		String encodedPassword = bCryptPasswordEncoder.encode(password);
		// Act
		boolean matches = bCryptPasswordEncoder.matches(password, encodedPassword);
		// Assert
		assertTrue(matches);
	}

	@Test
	@Tag("valid")
	void bCryptPasswordEncoderSingletonBehavior() {
		// Arrange
		WebSecurityConfig webSecurityConfig = new WebSecurityConfig();
		// Act
		BCryptPasswordEncoder bCryptPasswordEncoder1 = webSecurityConfig.bCryptPasswordEncoder();
		BCryptPasswordEncoder bCryptPasswordEncoder2 = webSecurityConfig.bCryptPasswordEncoder();
		// Assert
		assertSame(bCryptPasswordEncoder1, bCryptPasswordEncoder2);
	}

}